variables:
  GIT_SUBMODULE_STRATEGY: recursive
  # We want full history so that "git describe" always works correctly.
  GIT_DEPTH: 0

test:
  stage: test

  image: golang:$IMAGE_TAG

  variables:
    # We set GO111MODULE so that we can use "go get" instead of "go install"
    # for all Go versions in the parallel matrix.
    GO111MODULE: 'on'

  before_script:
    - apk --update add make gcc musl-dev
    - (cd /go; go get gotest.tools/gotestsum@v1.7.0)
    - (cd /go; go get github.com/boumenot/gocover-cobertura@v1.2.0)

  script:
    - make test-ci

  artifacts:
    when: always
    reports:
      junit: tests.xml
      cobertura: coverage.xml
    paths:
      - coverage.html
    expire_in: never

  # This has to be set in project's settings (CI/CD -> General pipelines section) as well.
  coverage: '/coverage: \d+\.\d+% of statements/'

  parallel:
    matrix:
      - IMAGE_TAG: ['1.14-alpine3.13', '1.15-alpine3.14', '1.16-alpine3.14', '1.17-alpine3.14']

lint:
  stage: test

  image: golang:1.17-alpine3.14

  before_script:
    - apk --update add make gcc musl-dev
    - wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.43.0

  script:
    - make lint-ci

  artifacts:
    when: always
    reports:
      codequality: codeclimate.json
    expire_in: never

fmt:
  stage: test

  image: golang:1.17-alpine3.14

  before_script:
    - apk --update add make git gcc musl-dev
    - go install mvdan.cc/gofumpt@v0.2.0
    - go install golang.org/x/tools/cmd/goimports@v0.1.7

  script:
    - make fmt-ci

docs:
  stage: test

  image: node:17-alpine3.14

  before_script:
    - npm install -g 'markdownlint-cli@~0.30.0'

  script:
    - "npx --no markdownlint -- --ignore-path .gitignore '**/*.md'"

publish:
  stage: deploy

  image: golang:1.17-alpine3.14

  script:
    - GOPROXY=proxy.golang.org go list -m "gitlab.com/tozd/go/errors@$CI_COMMIT_REF_NAME"

  rules:
    # Only on protected tags on main repository. Protected tags start with "v".
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME =~ /^v/ && $CI_PROJECT_PATH == "tozd/go/errors"'

sync_releases:
  stage: deploy

  image:
    name: registry.gitlab.com/tozd/gitlab/release/tag/v0-2-1:latest-debug
    entrypoint: [""]

  script:
    - /gitlab-release

  rules:
    # Protected tags start with "v".
    - if: '$GITLAB_API_TOKEN && ($CI_COMMIT_BRANCH == "main" || ($CI_COMMIT_TAG && $CI_COMMIT_REF_NAME =~ /^v/))'
